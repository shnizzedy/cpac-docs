# This is a C-PAC nodeblock descriptor file. (to be pulled from C-PAC/CPAC/nodeblock)

steps:

  distcor_phasediff_fsl_fugue:
    description: null
    references: null
    methods:
      distcor_phasediff_fsl_fugue():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[Start: distcor_phasediff_fsl_fugue] --> B[Check fmap_skullstrip_option];
            B --> C{AFNI};
            C --> D[Create skullstrip_args node];
            D --> E[Connect skullstrip_args to AFNI node];
            E --> F[Connect magnitude data to AFNI];
            F --> G[Store brain_node output];

            C --> H{BET};
            H --> I[Create BET node];
            I --> J[Connect magnitude data to BET];
            J --> K[Store brain_node output];

            A --> L[Prepare fieldmap];
            L --> M[Connect deltaTE data to prepare node];
            M --> N[Check if phase1 and phase2 are available];
            N --> O{Available};
            O --> P[Create fslmaths_sub node];
            P --> Q[Connect phase1 and phase2 to fslmaths_sub];
            Q --> R[Store fslmaths_sub output];
            O --> S{Not Available};
            S --> T[Use phasediff data];
            T --> U[Connect phasediff data to prepare node];

            L --> V[Connect brain_node output to prepare node];
            V --> W[Create fslmath_mag node];
            W --> X[Connect brain_node to fslmath_mag];
            X --> Y[Create fslmath_abs node];
            Y --> Z[Connect fslmath_mag to fslmath_abs];

            Y --> AA[Create fslmath_bin node];
            AA --> AB[Connect fslmath_abs to fslmath_bin];

            L --> AC[Create fslmath_mask_1 node];
            AC --> AD[Connect prepare output to fslmath_mask_1];

            AC --> AE[Create fslmath_mask_2 node];
            AE --> AF[Connect fslmath_mask_1 to fslmath_mask_2];

            L --> AG[Create fslmath_mask node];
            AG --> AH[Connect fslmath_mask_2 and fslmath_bin to fslmath_mask];

            AG --> AI[Create fugue1 node];
            AI --> AJ[Connect fslmath_mask to fugue1];
            AJ --> AK[Connect effectiveEchoSpacing and ees-asym-ratio to fugue1];
            AK --> AL[Connect prepare output to fugue1];

            AL --> AM[Output: despiked-fieldmap and fieldmap-mask];
        source: null
        validation: null
      same_pe_direction_prep():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[Start: same_pe_direction_prep] --> B{Check same_pe_epi};
            B --> C{No same_pe_epi};
            C --> D[Use func_mean as qwarp_input];
            B --> E{Yes same_pe_epi};
            E --> F[Create skullstrip_outfile];
            F --> G[Run 3dAutomask command];
            G --> H[Create extract_brain_outfile];
            H --> I[Run 3dcalc command];
            I --> J[Create align_epi_outfile];
            J --> K[Run flirt command];
            K --> L[Set qwarp_input as align_epi_outfile];
            D --> M[Return qwarp_input];
            L --> M;
        source: null
        validation: null
      calculate_blip_warp():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[Start: calculate_blip_warp] --> B[Set output warp path];
            B --> C[Run 3dQwarp command with opp_pe and same_pe];
            C --> D[Return Qwarp_PLUS_WARP.nii.gz];
        source: null
        validation: null
      convert_afni_to_ant():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[Start: convert_afni_to_ants] --> B[Get absolute path of afni_warp];
            B --> C[Load AFNI warp image with nibabel];
            C --> D[Copy header and modify data type to <f4];
            D --> E[Set intent of header to vector];
            E --> F[Get AFNI warp data and convert to <f4];
            F --> G[Set output path for ANTs warp];
            G --> H[Save ANTs warp using nibabel];
            H --> I[Return ANTs warp path];
        source: null
        validation: null

  distcor_blip_afni_qwarp:
    description: null
    references: null
    methods:
      distcor_blip_afni_qwarp():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[Start: distcor_blip_afni_qwarp] --> B[Create match_epi_fmaps node];
            B --> C[Connect EPI-1 to match_epi_fmaps];
            C --> D[Connect EPI-1-scan-params to match_epi_fmaps];
            D --> E[Check if EPI-2 exists];
            E -->|Yes| F[Connect EPI-2 to match_epi_fmaps];
            F --> G[Connect EPI-2-scan-params to match_epi_fmaps];
            E -->|No| H[Skip EPI-2 connection];
            G --> I[Connect phase encoding direction to match_epi_fmaps];
            I --> J[Create func_get_brain_mask node];
            J --> K[Connect match_epi_fmaps to func_get_brain_mask];
            K --> L[Create func_edge_detect node];
            L --> M[Connect match_epi_fmaps to func_edge_detect];
            M --> N[Connect func_get_brain_mask to func_edge_detect];
            N --> O[Create opp_pe_to_func node];
            O --> P[Connect func_edge_detect to opp_pe_to_func];
            P --> Q[Connect SBREF to opp_pe_to_func];
            Q --> R[Create prep_qwarp_input node];
            R --> S[Connect match_epi_fmaps to prep_qwarp_input];
            S --> T[Connect SBREF to prep_qwarp_input];
            T --> U[Create calc_blip_warp node];
            U --> V[Connect opp_pe_to_func to calc_blip_warp];
            V --> W[Connect prep_qwarp_input to calc_blip_warp];
            W --> X[Create convert_afni_warp node];
            X --> Y[Connect calc_blip_warp to convert_afni_warp];
            Y --> Z[Create undistort_func_mean node];
            Z --> AA[Connect SBREF to undistort_func_mean];
            AA --> AB[Connect convert_afni_warp to undistort_func_mean];
            AB --> AC[Create remask node];
            AC --> AD[Connect undistort_func_mean to remask];
            AD --> AE[Set output dictionary];
            AE --> AF[Return wf and outputs];
        source: null
        validation: null

  distcor_blip_fsl_topup:
    description: null
    references: null
    methods:
      distcor_blip_fsl_topup():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[Create List] --> B[Merge Image];
            B --> C[Mask];
            C --> D[Extrapolate Values];
            D --> E[Phase Encoding];
            E --> F[Run FSL TOPUP];
            F --> G[Choose Phase];
            G --> H[Motion, Jac, Warp Matrices];
            H --> I[FLIRT - SBRef to Phase Two];
            I --> J[Convert XFM];
            J --> K[Convert Warp];
            K --> L[Phase Two AW - Apply Warp];
            L --> M[Phase One AW - Apply Warp];
            M --> N[Scout AW - Apply Warp];
            N --> O[Multiply Jacobian];
            O --> P[Calculate Equivalent Field Map];
            P --> Q[Mean Field Map];
            Q --> R[Field Map with fsl_bet];

            subgraph "Data Flow"
                A[Create List];
                B[Merge Image];
                C[Mask];
                D[Extrapolate Values];
                E[Phase Encoding];
                F[Run FSL TOPUP];
                G[Choose Phase];
                H[Motion, Jac, Warp Matrices];
                I[FLIRT - SBRef to Phase Two];
                J[Convert XFM];
                K[Convert Warp];
                L[Phase Two AW - Apply Warp];
                M[Phase One AW - Apply Warp];
                N[Scout AW - Apply Warp];
                O[Multiply Jacobian];
                P[Calculate Equivalent Field Map];
                Q[Mean Field Map];
                R[Field Map with fsl_bet];
            end;
        source: null
        validation: null