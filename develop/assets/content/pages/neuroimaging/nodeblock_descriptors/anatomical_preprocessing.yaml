# This is a C-PAC nodeblock descriptor file. (to be pulled from C-PAC/CPAC/nodeblock)

steps:
  anatomical_init:
    description: null
    references: null
    methods:
      anatomical_init():
        description: null
        references: null
        config: null
        operations: |
          ---
          title: "anatomical_init"
          ---
          graph TD
              subgraph inputs
                input_t1w[T1w]
              end
              inputs --> B[deoblique]
              B[deoblique] --> C[reorient]
              C[reorient] --> outputs

              subgraph outputs
                  output_preproc[desc-preproc_T1w]
                  output_reorient[desc-reorient_T1w]
                  output_head[desc-head_T1w]
              end
        source: null
        validation: null

  acpc_alignment_head:
    description: Transforms image to bring into alignment with the plane of the anterior and posterior commissures (ACPC)
    references: null
    methods:
      acpc_align_head():
        description: null
        references: null
        config: null
        operations: |
          ---
          title: "acpc_alignment_head"
          ---
          graph TD
              subgraph inputs
                  input_head[desc-head_T1w]
                  input_preproc[desc-preproc_T1w]
                  input_target[acpc_target]
              end
              inputs --> B[acpc_align]
              B --> outputs
              subgraph outputs
                  output_head[desc-head_T1w]
                  output_preproc[desc-preproc_T1w]
                  output_xfm[from-T1w_to-ACPC_mode-image_desc-aff2rig_xfm]
              end
        source: null
        validation: null

  acpc_alignment_head_with_mask:
    description: null
    references: null
    methods:
      acpc_align_head_with_mask():
        description: null
        references: null
        config: null
        operations: |
          ---
          title: "acpc_alignment_head_with_mask"
          ---
          graph TD
              subgraph inputs
                  input_head[desc-head_T1w]
                  input_mask[space-T1w_desc-brain_mask]
                  input_preproc[desc-preproc_T1w]
                  input_target[acpc_target]
              end
              inputs --> B[acpc_align]
              B --> outputs
              subgraph outputs
                  output_head[desc-head_T1w]
                  output_mask[space-T1w_desc-brain_mask]
                  output_preproc[desc-preproc_T1w]
                  output_xfm[from-T1w_to-ACPC_mode-image_desc-aff2rig_xfm]
              end
        source: null
        validation: null

  acpc_align_brain:
    description: null
    references: null
    methods:
      acpc_align_brain():
        description: null
        references: null
        config: null
        operations: |
          ---
          title: "acpc_alignment_brain"
          ---
          graph TD
              subgraph inputs
                  input_brain[desc-tempbrain_T1w]
                  input_preproc[desc-preproc_T1w]
                  input_target[acpc_target]
              end
              inputs --> B[acpc_align]
              B --> outputs
              subgraph outputs
                  output_brain[desc-acpcbrain_T1w]
                  output_preproc[desc-preproc_T1w]
                  output_xfm[from-T1w_to-ACPC_mode-image_desc-aff2rig_xfm]
              end
        source: null
        validation: null

  acpc_align_brain_with_mask:
    description: null
    references: null
    methods:
      acpc_align_brain_with_mask():
        description: null
        references: null
        config: null
        operations: |
          ---
          title: "acpc_align_brain_with_mask"
          ---
          graph TD
              subgraph inputs
                  input_mask[space-T1w_desc-brain_mask]
                  input_brain[desc-tempbrain_T1w]
                  input_preproc[desc-preproc_T1w]
                  input_target[acpc_target]
              end
              inputs --> B[acpc_align]
              B --> outputs
              subgraph outputs
                  output_mask[desc-acpcbrain_T1w]
                  output_preproc[desc-preproc_T1w]
                  output_T1w_brain[space-T1w_desc-brain_mask]
                  output_T1w_prebrain[space-T1w_desc-prebrain_mask]
                  output_xfm[from-T1w_to-ACPC_mode-image_desc-aff2rig_xfm]
              end
        source: null
        validation: null

  registration_T2w_to_T1w:
    description: null
    references: null
    methods:
      registration_T2w_to_T1w():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[T2_to_T1_reg] --> B[set wf_name to T2w_to_T1w_Reg_{pipe_num}]
            A --> C[connect desc-preproc_T1w to T1w]
            A --> D[connect desc-preproc_T2w to T2w]
            A --> E[connect desc-acpcbrain_T1w to T1w_brain]
            A --> F[connect desc-acpcbrain_T2w to T2w_brain]
            E --> G[outputs]
            F --> G
            G --> H[desc-preproc_T2w]
            H --> I[return wf, outputs]
        source: null
        validation: null

  nlm_filtering:
    description:
      - Performs non-local means filtering on structural data using ANTSDenoiseImage.
      - Non-local means filtering reduces noise by averaging pixel intensities based on similarity, not just proximity, preserving important structural details like edges and fine anatomical features.
      - Unlike traditional smoothing methods (e.g., Gaussian smoothing), which blur the image and reduce sharpness, NLM compares patches of the image to identify similar regions, even if they are spatially distant.
      - This approach is particularly beneficial for structural MRI, where fine details and boundaries between tissues must remain clear.
      - This can possibly improve registration or tissue segmentation results.
    references:
      - https://en.wikipedia.org/wiki/Non-local_means
    methods:
      non_local_means():
        description: null
        references:
          - https://manpages.debian.org/experimental/ants/DenoiseImage.1.en.html
        config: null
        operations: |
          graph TD
              nlm_filtering["nlm_filtering"];
              anat_denoise["anat_denoise"];
              
              nlm_filtering -->|connects| anat_denoise;
              anat_denoise -->|output_image| desc_preproc_T1w["desc-preproc_T1w"];
              
              desc_preproc_input["desc-preproc_T1w"] -->|input data| nlm_filtering;
              nlm_filtering -->|outputs| desc_preproc_T1w;
        source:
          NiWrap: https://github.com/childmindresearch/cpac_blocks/blob/main/anat_preproc/nlm.py
          Nipype: https://github.com/FCP-INDI/C-PAC/blob/rc/v1.8.7/CPAC/anat_preproc/anat_preproc.py#L1528-L1537
        validation: s3://path/to/gold/standard

  n4_bias_correction:
    description:
      - The bias field is a low-frequency artifact in MRI images that results in uneven signal intensity across the image, unrelated to the actual tissue.
      - This method will remove the bias field while preserving the true anatomical contrast in the image.
      - Can be used to improve tissue contrast in MRI images, which can possibly improve registration or tissue segmentation results.
      - If you see a gradient of voxel intensity difference spanning over the length of the image (ex. very light at one end of the head, very dark at the other, with a smooth transition in between that is not related to anatomical boundaries), using this technique may work particularly well with that specific data.
    references: null
    methods:
      n4_bias_correction():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[n4] --> B[set interface to ants.N4BiasFieldCorrection]
            A --> C[set shrink_factor from config]
            C --> D[connect desc-preproc_T1w to input_image]
            D --> E[outputs]
            E --> F[desc-preproc_T1w]
            E --> G[desc-n4_T1w]
            F --> H[return wf, outputs]
            G --> H
        source: null
        validation: null

  t1t2_bias_correction:
    description:
      - T1w/T2w maps contain individual B1+ (RF transmit field) biases which may be correlated with variables of interest
      - Estimate and correct bias fields using T1w/T2w maps
    references: null
    methods:
      t1t2_bias_correction():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[t1t2_bias_correction] --> B[set interface to BiasFieldCorrection_sqrtT1wXT1w]
            A --> C[connect desc-preproc_T1w to inputspec.T1w]
            A --> D[connect desc-preproc_T2w to inputspec.T2w]
            A --> E[connect desc-acpcbrain_T1w to inputspec.T1w_brain]
            C --> F[outputs]
            D --> F
            E --> F
            F --> G[desc-preproc_T1w]
            F --> H[desc-brain_T1w]
            F --> I[desc-preproc_T2w]
            F --> J[desc-brain_T2w]
            F --> K[desc-biasfield_T1wT2w]
            G --> L[return wf, outputs]
            H --> L
            I --> L
            J --> L
            K --> L
        source: null
        validation: null

  brain_mask_afni:
    description: Uses AFNI 3dSkullStrip.
    references: null
    methods:
      brain_mask_afni():
        description: null
        references: null
        config:
          shrink_factor: 0.6
          var_shrink_fac: On
          shrink_factor_bot_lim: 0.4
          avoid_vent: On
          n_iterations: 250
          pushout: On
          touchup: On
          fill_hole: 10
          NN_smooth: 72
          smooth_final: 20
          avoid_eyes: On
          use_edge: On
          exp_frac: 0.1
          push_to_edge: Off
          use_skull: Off
          perc_int: 0
          max_inter_iter: 4
          fac: 1
          blur_fwhm: 0
          monkey: Off
        operations: |
          graph TD
              brain_mask_afni_T2["brain_mask_afni_T2"];
              afni_brain_connector["afni_brain_connector"];

              desc_preproc_T2w["desc-preproc_T2w"] -->|input| brain_mask_afni_T2;
              brain_mask_afni_T2 -->|calls| afni_brain_connector;
              afni_brain_connector -->|output| space_T2w_desc_brain_mask["space-T2w_desc-brain_mask"];
        source: null
        validation: null

  brain_mask_acpc_afni:
    description: null
    references: null
    methods:
      brain_mask_acpc_afni():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_afni] --> B[call afni_brain_connector]
            B --> C[extract space-T1w_desc-brain_mask]
            C --> D[return wf, outputs]
        source: null
        validation: null

  brain_mask_fsl:
    description: Generates a binary brain mask of a T1w structural image.  Skull-stripping is the removal of skull and other non-brain tissue like dura and eyes from anatomical images, which could otherwise complicate co-registration and normalization steps.
    references: null
    methods:
      brain_mask_fsl():
        description: Uses FSL BET.
        references:
          - links to manuals
          - links to papers
          - etc.
        config:
          Robustfov: Off
          frac: 0.5
          mesh_boolean: Off
          outline: Off
          padding: Off
          radius: 0
          reduce_bias: Off
          remove_eyes: Off
          robust: Off
          skull: Off
          surfaces: Off
          threshold: Off
          vertical_gradient: 0.0
        operations: |
          graph TD
              brain_mask_fsl["brain_mask_fsl"];
              fsl_brain_connector["fsl_brain_connector"];

              desc_preproc_T1w["desc-preproc_T1w"] -->|input| brain_mask_fsl;
              brain_mask_fsl -->|calls| fsl_brain_connector;
              fsl_brain_connector -->|output| space_T1w_desc_brain_mask["space-T1w_desc-brain_mask"];
        source: null
        validation: null

  brain_mask_acpc_fsl:
    description: null
    references: null
    methods:
      brain_mask_acpc_fsl():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_fsl] --> B[call fsl_brain_connector]
            B --> C[extract space-T1w_desc-brain_mask]
            C --> D[return wf, outputs]
        source: null
        validation: null

  brain_mask_niworkflows_ants:
    description: null
    references: null
    methods:
      brain_mask_niworkflows_ants():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_niworkflows_ants] --> B[call niworkflows_ants_brain_connector]
            B --> C[return wf, outputs]
        source: null
        validation: null

  brain_mask_acpc_niworkflows_ants:
    description: null
    references: null
    methods:
      brain_mask_acpc_niworkflows_ants():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_niworkflows_ants] --> B[call niworkflows_ants_brain_connector]
            B --> C[return wf, outputs]
            C --> D[space-T1w_desc-acpcbrain_mask: wf_outputs: space-T1w_desc-brain_mask]
            C --> E[desc-preproc_T1w: wf_outputs: desc-preproc_T1w]
        source: null
        validation: null

  brain_mask_unet:
    description: null
    references: null
    methods:
      brain_mask_unet():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_unet] --> B[call unet_brain_connector]
            B --> C[return wf, outputs]
        source: null
        validation: null

  brain_mask_acpc_unet:
    description: null
    references: null
    methods:
      brain_mask_acpc_unet():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_unet] --> B[call unet_brain_connector]
            B --> C[return wf, outputs]
            C --> D[space-T1w_desc-acpcbrain_mask]
        source: null
        validation: null

  brain_mask_freesurfer:
    description: null
    references: null
    methods:
      brain_mask_freesurfer():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_freesurfer] --> B[call freesurfer_brain_connector]
            B --> C[return wf, outputs]
        source: null
        validation: null

  brain_mask_freesurfer_abcd:
    description: null
    references: null
    methods:
      brain_mask_freesurfer_abcd():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_freesurfer_abcd] --> B[call freesurfer_abcd_brain_connector]
            B --> C[return wf, outputs]
        source: null
        validation: null

  brain_mask_freesurfer_fsl_tight:
    description: null
    references: null
    methods:
      brain_mask_freesurfer_fsl_tight():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_freesurfer_fsl_tight] --> B[call freesurfer_fsl_brain_connector]
            B --> C[return wf, outputs]
        source: null
        validation: null

  brain_mask_acpc_freesurfer_abcd:
    description: null
    references: null
    methods:
      brain_mask_acpc_freesurfer_abcd():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_freesurfer_abcd] --> B[call freesurfer_abcd_brain_connector]
            B --> C[return wf, outputs]
            C --> D[space-T1w_desc-acpcbrain_mask]
        source: null
        validation: null

  brain_mask_freesurfer_fsl_loose:
    description: null
    references: null
    methods:
      brain_mask_freesurfer_fsl_loose():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_freesurfer_fsl_loose] --> B[call freesurfer_fsl_brain_connector]
            B --> C[return wf, outputs]
        source: null
        validation: null

  brain_mask_acpc_freesurfer_fsl_tight:
    description: null
    references: null
    methods:
      brain_mask_acpc_freesurfer_fsl_tight():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_freesurfer_fsl_tight] --> B[call freesurfer_fsl_brain_connector]
            B --> C[extract space-T1w_desc-tight_brain_mask]
            C --> D[set outputs as space-T1w_desc-tight_acpcbrain_mask]
            D --> E[return wf, outputs]
        source: null
        validation: null

  brain_mask_acpc_freesurfer_fsl_loose:
    description: null
    references: null
    methods:
      brain_mask_acpc_freesurfer_fsl_loose():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_freesurfer_fsl_loose] --> B[call freesurfer_fsl_brain_connector]
            B --> C[extract space-T1w_desc-loose_brain_mask]
            C --> D[set outputs as space-T1w_desc-loose_acpcbrain_mask]
            D --> E[return wf, outputs]
        source: null
        validation: null

  brain_extraction:
    description: null
    references: null
    methods:
      brain_extraction():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_extraction] --> B[create anat_skullstrip_orig_vol node]
            B --> C[set inputs for anat_skullstrip_orig_vol]
            C --> D[connect inputnode.brain_mask to anat_skullstrip_orig_vol]
            D --> E[get T1w data from strat_pool]
            E --> F[connect T1w data to anat_skullstrip_orig_vol]
            F --> G[get brain_mask data from strat_pool]
            G --> H[connect brain_mask data to anat_skullstrip_orig_vol]
            H --> I[set outputs for desc-preproc_T1w, desc-brain_T1w, and desc-head_T1w]
            I --> J[return wf, outputs]
        source: null
        validation: null

  brain_extraction_temp:
    description: null
    references: null
    methods:
      brain_extraction_temp():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[desc-preproc_T1w] --> B[brain_extraction_temp_{pipe_num} in_file_a]
            C[space-T1w_desc-brain_mask] --> B[brain_extraction_temp_{pipe_num} in_file_b]
            D[space-T1w_desc-acpcbrain_mask] --> B[brain_extraction_temp_{pipe_num} in_file_b]
            B --> E[outputspec.desc-preproc_T1w]
            B --> F[outputspec.desc-tempbrain_T1w]
        source: null
        validation: null

  anatomical_init_T2:
    description: null
    references: null
    methods:
      anatomical_init_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[T2w] --> B[T2_deoblique_{pipe_num} in_file]
            B --> C[T2_reorient_{pipe_num} in_file]
            C --> D[outputspec.desc-preproc_T2w]
            C --> E[outputspec.desc-reorient_T2w]
            C --> F[outputspec.desc-head_T2w]
        source: null
        validation: null

  acpc_alignment_head_T2:
    description: null
    references: null
    methods:
      acpc_alignment_head_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[desc-preproc_T2w] --> B[acpc_align_T2_{pipe_num} anat_leaf]
            C[T2w-ACPC-template] --> B[acpc_align_T2_{pipe_num} template_head_for_acpc]
            B --> D[outputspec.acpc_aligned_head]
            D --> E[desc-preproc_T2w]
        source: null
        validation: null

  acpc_alignment_head_with_mask_T2:
    description: null
    references: null
    methods:
      acpc_alignment_head_with_mask_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[desc-preproc_T2w] --> B[acpc_align_T2_{pipe_num} anat_leaf]
            C[T2w-ACPC-template] --> B[acpc_align_T2_{pipe_num} template_head_for_acpc]
            B --> D[outputspec.acpc_aligned_head]
            B --> E[outputspec.acpc_brain_mask]
            D --> F[desc-preproc_T2w]
            E --> G[space-T2w_desc-brain_mask]
        source: null
        validation: null

  acpc_alignment_brain_T2:
    description: null
    references: null
    methods:
      acpc_alignment_brain_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[desc-preproc_T2w] --> B[acpc_align_T2_{pipe_num} anat_leaf]
            C[desc-tempbrain_T2w] --> B[acpc_align_T2_{pipe_num} anat_brain]
            D[T2w-ACPC-template] --> B[acpc_align_T2_{pipe_num} template_head_for_acpc]
            E[T2w-brain-ACPC-template] --> B[acpc_align_T2_{pipe_num} template_brain_for_acpc]
            B --> F[outputspec.acpc_aligned_head]
            B --> G[outputspec.acpc_aligned_brain]
            F --> H[desc-preproc_T2w]
            G --> I[desc-acpcbrain_T2w]
        source: null
        validation: null

  acpc_align_brain_with_mask_T2:
    description: null
    references: null
    methods:
      acpc_align_brain_with_mask_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[desc-preproc_T2w] --> B[acpc_align_T2_{pipe_num} anat_leaf]
            C[desc-tempbrain_T2w] --> B[acpc_align_T2_{pipe_num} anat_brain]
            D[space-T2w_desc-brain_mask] --> B[acpc_align_T2_{pipe_num} brain_mask]
            E[T2w-ACPC-template] --> B[acpc_align_T2_{pipe_num} template_head_for_acpc]
            F[T2w-brain-ACPC-template] --> B[acpc_align_T2_{pipe_num} template_brain_for_acpc]
            B --> G[outputspec.acpc_aligned_head]
            B --> H[outputspec.acpc_aligned_brain]
            B --> I[outputspec.acpc_brain_mask]
            G --> J[desc-preproc_T2w]
            H --> K[desc-acpcbrain_T2w]
            I --> L[space-T2w_desc-brain_mask]
        source: null
        validation: null

  nlm_filtering_T2:
    description: null
    references: null
    methods:
      non_local_means_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[desc-preproc_T2w] --> B[anat_denoise_T2_{pipe_num}]
            B --> C[output_image]
            C --> D[desc-preproc_T2w]
        source: null
        validation: null

  n4_bias_correction_T2:
    description: null
    references: null
    methods:
      n4_bias_correction_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[n4_bias_correction_T2] --> B[ants.N4BiasFieldCorrection];
            A --> C[strat_pool.get_data desc-preproc_T2w];
            B --> D[output_image];
        source: null
        validation: null

  brain_mask_afni_T2:
    description: null
    references: null
    methods:
      brain_mask_afni_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_afni_T2] --> B[afni_brain_connector];
        source: null
        validation: null

  brain_mask_acpc_afni_T2:
    description: null
    references: null
    methods:
      brain_mask_acpc_afni_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_afni_T2] --> B[afni_brain_connector];
        source: null
        validation: null

  brain_mask_fsl_T2:
    description: null
    references: null
    methods:
      brain_mask_fsl_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_fsl_T2] --> B[fsl_brain_connector];
        source: null
        validation: null

  brain_mask_acpc_fsl_T2:
    description: null
    references: null
    methods:
      brain_mask_acpc_fsl_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_fsl_T2] --> B[fsl_brain_connector];
            B --> C[space-T2w_desc-brain_mask];
        source: null
        validation: null

  brain_mask_niworkflows_ants_T2:
    description: null
    references: null
    methods:
      brain_mask_niworkflows_ants_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_niworkflows_ants_T2] --> B[niworkflows_ants_brain_connector];
            B --> C[space-T2w_desc-brain_mask];
        source: null
        validation: null

  brain_mask_acpc_niworkflows_ants_T2:
    description: null
    references: null
    methods:
      brain_mask_acpc_niworkflows_ants_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_niworkflows_ants_T2] --> B[niworkflows_ants_brain_connector];
            B --> C[space-T2w_desc-brain_mask];
            C --> D[space-T2w_desc-acpcbrain_mask];
        source: null
        validation: null

  brain_mask_unet_T2:
    description: null
    references: null
    methods:
      brain_mask_unet_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_unet_T2] --> B[unet_brain_connector];
            B --> C[outputs];
        source: null
        validation: null

  brain_mask_acpc_unet_T2:
    description: null
    references: null
    methods:
      brain_mask_acpc_unet_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_unet_T2] --> B[unet_brain_connector];
            B --> C[wf_outputs];
            C --> D[output space-T2w_desc-acpcbrain_mask];
        source: null
        validation: null

  brain_mask_T2:
    description: null
    references: null
    methods:
      brain_mask_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_T2] --> B[mask_T2];

            B --> C{cfg.acpc_alignment.run?};

            C -- No --> D[get desc-reorient_T1w, T1w, desc-preproc_T1w];
            D --> E[connect to B.inputspec.T1w];

            E --> F[get desc-reorient_T2w, T2w, desc-preproc_T2w];
            F --> G[connect to B.inputspec.T2w];

            C -- Yes --> H[get desc-preproc_T1w, desc-reorient_T1w, T1w];
            H --> I[connect to B.inputspec.T1w];

            I --> J[get desc-preproc_T2w, desc-reorient_T2w, T2w];
            J --> K[connect to B.inputspec.T2w];

            K --> L[get space-T1w_desc-brain_mask, space-T1w_desc-acpcbrain_mask];
            L --> M[connect to B.inputspec.T1w_mask];

            M --> N[output space-T2w_desc-brain_mask from B.outputspec.T2w_mask];
        source: null
        validation: null

  brain_mask_acpc_T2:
    description: null
    references: null
    methods:
      brain_mask_acpc_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_mask_acpc_T2] --> B[mask_T2];
            B --> C[get desc-reorient_T1w from strat_pool];
            C --> D[connect to B.inputspec.T1w];
            D --> E[get desc-reorient_T2w from strat_pool];
            E --> F[connect to B.inputspec.T2w];
            F --> G[get space-T1w_desc-acpcbrain_mask, space-T1w_desc-prebrain_mask from strat_pool];
            G --> H[connect to B.inputspec.T1w_mask];
            H --> I[output space-T2w_desc-acpcbrain_mask from B.outputspec.T2w_mask];
        source: null
        validation: null

  brain_extraction_T2:
    description: null
    references: null
    methods:
      brain_extraction_T2:
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_extraction_T2] --> B{cfg.acpc_alignment.run and acpc_target == brain};
            B -- True --> C[get desc-acpcbrain_T2w from strat_pool];
            C --> D[output desc-brain_T2w];

            B -- False --> E[anat_skullstrip_orig_vol using afni.Calc];
            E --> F[set expr to a*step b and outputtype to NIFTI_GZ];
            F --> G[get desc-preproc_T2w from strat_pool];
            G --> H[connect to anat_skullstrip_orig_vol.in_file_a];
            H --> I[get space-T2w_desc-brain_mask from strat_pool];
            I --> J[connect to anat_skullstrip_orig_vol.in_file_b];
            J --> K[output desc-brain_T2w from anat_skullstrip_orig_vol.out_file];
        source: null
        validation: null

  brain_extraction_temp_T2:
    description: null
    references: null
    methods:
      brain_extraction_temp_T2():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[brain_extraction_temp_T2] --> B[anat_skullstrip_orig_vol using afni.Calc];
            B --> C[set expr to a*step b and outputtype to NIFTI_GZ];
            C --> D[get desc-preproc_T2w from strat_pool];
            D --> E[connect to anat_skullstrip_orig_vol.in_file_a];
            E --> F[get space-T2w_desc-brain_mask or space-T2w_desc-acpcbrain_mask];
            F --> G[connect to anat_skullstrip_orig_vol.in_file_b];
            G --> H[output desc-tempbrain_T2w from anat_skullstrip_orig_vol.out_file];
        source: null
        validation: null

  freesurfer_abcd_preproc:
    description: null
    references: null
    methods:
      freesurfer_abcd_preproc():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[freesurfer_abcd_preproc] --> B[fnirt_based_brain_extraction]
            B --> C[connect strat_pool desc-preproc_T1w to brain_extraction.anat_data]
            C --> D[connect template-ref-mask-res-2 to brain_extraction.template-ref-mask-res-2]
            D --> E[connect T1w-template to brain_extraction.template_skull_for_anat]
            E --> F[connect T1w-template-res-2 to brain_extraction.template_skull_for_anat_2mm]
            F --> G[connect T1w-brain-template-mask to brain_extraction.template_brain_mask_for_anat]

            A --> H[fast_bias_field_correction]
            H --> I[connect desc-preproc_T1w to fast_correction.anat_data]
            B --> J[connect brain_extraction.anat_brain to fast_correction.anat_brain]
            B --> K[connect brain_extraction.anat_brain_mask to fast_correction.anat_brain_mask]

            A --> L[resample_head_1mm using fsl.FLIRT]
            L --> M[connect desc-preproc_T1w to resample_head_1mm.in_file and reference]

            A --> N[applywarp_head_to_head_1mm using fsl.ApplyWarp]
            N --> O[connect desc-preproc_T1w to applywarp_head_to_head_1mm.in_file]
            L --> P[connect resample_head_1mm.out_file to applywarp_head_to_head_1mm.ref_file]

            A --> Q[applywarp_brain_to_head_1mm using fsl.ApplyWarp]
            H --> R[connect anat_brain_restore to applywarp_brain_to_head_1mm.in_file]
            L --> S[connect resample_head_1mm.out_file to applywarp_brain_to_head_1mm.ref_file]

            A --> T[average_brain using fsl.ImageStats]
            H --> U[connect anat_brain_restore to average_brain.in_file]

            A --> V[normalize_head using fslmaths_command]
            N --> W[connect applywarp_head_to_head_1mm.out_file to normalize_head.in_file]
            T --> X[connect average_brain.out_stat to normalize_head.number]

            V --> Y[define outputs including desc-restore_T1w, restore-brain, bias_field, and ABCDpreproc]
        source: null
        validation: null

  freesurfer_reconall:
    description: null
    references: null
    methods:
      freesurfer_reconall():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[freesurfer_reconall] --> B[create reconall node with interface=freesurfer.ReconAll]
            B --> C[set reconall parameters: skip_timeout, directive, subjects_dir, openmp]
            C --> D[create freesurfer_subject_dir using working_directory, subject_id, pipe_num]
            D --> E[check if freesurfer_subject_dir exists]
            E --> F[create freesurfer_subject_dir if it doesn't exist]
            F --> G[connect strat_pool to reconall T1_files]
            G --> H[call freesurfer_hemispheres: wf, reconall, pipe_num]
            H --> I[connect reconall outputs to hemisphere_outputs]
            I --> J[define outputs dictionary with freesurfer outputs]
            J --> K[return wf, outputs]
        source: null
        validation: null

      fnirt_based_brain_extraction():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[fnirt_based_brain_extraction] --> B[create inputnode with anat_data, template-ref-mask-res-2, template_skull_for_anat, template_skull_for_anat_2mm, template_brain_mask_for_anat]
            B --> C[create outputnode with anat_brain, anat_brain_mask]
            C --> D[create linear_reg node]
            D --> E[set linear_reg parameters: dof, interp, no_search]
            E --> F[connect anat_data to linear_reg in_file]
            F --> G[connect template_skull_for_anat_2mm to linear_reg reference]
            G --> H[create non_linear_reg node]
            H --> I[set non_linear_reg parameters: field_file, jacobian_file, modulatedref_file, out_intensitymap_file, fieldcoeff_file, config_file]
            I --> J[connect anat_data to non_linear_reg in_file]
            J --> K[connect template_skull_for_anat_2mm to non_linear_reg ref_file]
            K --> L[connect linear_reg to non_linear_reg affine_file]
            L --> M[connect template-ref-mask-res-2 to non_linear_reg refmask_file]
            M --> N[create apply_warp node]
            N --> O[set apply_warp parameters: interp, relwarp]
            O --> P[connect anat_data to apply_warp in_file]
            P --> Q[connect template_skull_for_anat to apply_warp ref_file]
            Q --> R[connect non_linear_reg to apply_warp field_file]
            R --> S[create inverse_warp node]
            S --> T[set inverse_warp parameters: output_type]
            T --> U[connect anat_data to inverse_warp reference]
            U --> V[connect non_linear_reg to inverse_warp warp]
            V --> W[create apply_inv_warp node]
            W --> X[set apply_inv_warp parameters: interp, relwarp]
            X --> Y[connect template_brain_mask_for_anat to apply_inv_warp in_file]
            Y --> Z[connect anat_data to apply_inv_warp ref_file]
            Z --> AA[connect inverse_warp to apply_inv_warp field_file]
            AA --> AB[connect apply_inv_warp to outputnode anat_brain_mask]
            AB --> AC[create apply_mask node]
            AC --> AD[set apply_mask op_string to -mas]
            AD --> AE[connect anat_data to apply_mask in_file]
            AE --> AF[connect apply_inv_warp to apply_mask operand_files]
            AF --> AG[connect apply_mask to outputnode anat_brain]
            AG --> AH[return preproc]
        source: null
        validation: null

      fast_bias_field_correction():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[fast_bias_field_correction] --> B[create inputnode with anat_data, anat_brain, anat_brain_mask]
            B --> C[create outputnode with anat_restore, anat_brain_restore, bias_field]
            C --> D[create fast_bias_field_correction node]
            D --> E[set fast_bias_field_correction parameters: img_type, output_biasfield, output_biascorrected]
            E --> F[connect anat_brain to fast_bias_field_correction in_files]
            F --> G[connect restored_image to outputnode anat_brain_restore]
            G --> H[connect bias_field to outputnode bias_field]
            H --> I[create inverse_brain_mask node]
            I --> J[set inverse_brain_mask op_string to -mul -1 -add 1]
            J --> K[connect anat_brain_mask to inverse_brain_mask in_file]
            K --> L[create apply_mask node]
            L --> M[set apply_mask op_string to -mul]
            M --> N[connect anat_data to apply_mask in_file]
            N --> O[connect inverse_brain_mask to apply_mask operand_files]
            O --> P[create anat_restore node]
            P --> Q[set anat_restore op_string to -add]
            Q --> R[connect restored_image to anat_restore in_file]
            R --> S[connect apply_mask to anat_restore operand_files]
            S --> T[connect anat_restore to outputnode anat_restore]
            T --> U[return preproc]
        source: null
        validation: null

  correct_restore_brain_intensity_abcd:
    description: null
    references: null
    methods:
      correct_restore_brain_intensity_abcd():
        description: null
        references: null
        config: null
        operations: |
          graph TD
            A[correct_restore_brain_intensity_abcd] --> B[create merge_t1_acpc_to_list node]
            B --> C[connect T1w data to merge_t1_acpc_to_list]
            C --> D[create merge_t1_acpc node]
            D --> E[set merge_t1_acpc dimension to t]
            E --> F[connect merged files to multiply_t1_acpc_by_zero]
            F --> G[create multiply_t1_acpc_by_zero node]
            G --> H[set multiply_t1_acpc_by_zero op_string to -mul 0]
            H --> I[create convertwarp_orig_t1_to_t1 node]
            I --> J[set convertwarp_orig_t1_to_t1 inputs: relwarp, out_relwarp]
            J --> K[connect brain_mask data to convertwarp_orig_t1_to_t1 reference]
            K --> L[connect T1w to ACPC transform to convertwarp_orig_t1_to_t1 premat]
            L --> M[connect multiplied T1w acpc to convertwarp_orig_t1_to_t1 warp1]
            M --> N[create applywarp_biasfield node]
            N --> O[set applywarp_biasfield inputs: relwarp, interp]
            O --> P[connect biasfield to applywarp_biasfield]
            P --> Q[connect brain_mask to applywarp_biasfield ref_file]
            Q --> R[connect transform to applywarp_biasfield field_file]
            R --> S[create threshold_biasfield node]
            S --> T[set threshold_biasfield op_string to -thr 0.1]
            T --> U[create applywarp_t1 node]
            U --> V[set applywarp_t1 inputs: relwarp, interp]
            V --> W[connect n4 T1w to applywarp_t1 in_file]
            W --> X[connect brain_mask to applywarp_t1 ref_file]
            X --> Y[connect warp field to applywarp_t1 field_file]
            Y --> Z[create abs_t1 node]
            Z --> AA[set abs_t1 op_string to -abs]
            AA --> AB[connect applywarp_t1 to abs_t1]
            AB --> AC[create div_t1_by_biasfield node]
            AC --> AD[set div_t1_by_biasfield op_string to -div]
            AD --> AE[connect abs_t1 to div_t1_by_biasfield in_file]
            AE --> AF[connect biasfield to div_t1_by_biasfield in_file2]
            AF --> AG[create apply_mask node]
            AG --> AH[connect div_t1_by_biasfield to apply_mask in_file]
            AH --> AI[connect brain_mask to apply_mask mask_file]
            AI --> AJ[set outputs for desc-restore-brain_T1w]
            AJ --> AK[return wf, outputs]
        source: null
        validation: null
